版本資訊
Microsoft JDBC Driver 8.2 for SQL Server
2020 年 3 月

------------
簡介
------------
本檔案包含最新或其他重要資訊，以補充 Microsoft JDBC 
Driver 8.2 for SQL Server 文件。您應先完整閱讀本檔案，再安裝 
JDBC 驅動程式。

我們非常重視您的意見，並會盡力在最短的時間內 
回應您的意見反應。如需使用 JDBC 驅動程式部落格與線上論壇來提供意見反應的相關資訊，
請參閱 https://aka.ms/mssql-jdbc-feedback 的 Microsoft JDBC Driver 8.2 for SQL Server 頁面


------------
安裝
------------
安裝 JDBC 驅動程式的指示位於 install.txt 中。請參閱該檔案，以取得 
在 Windows、Linux 與 macOS 作業系統上安裝 JDBC 驅動程式的相關資訊。


---------------------------
支援的作業系統
---------------------------
支援 Microsoft JDBC Driver 8.2 for SQL Server 的作業系統包含：
  Windows Server 2012
  Windows Server 2012 R2
  Windows Server 2016
  Windows Server 2019
  Windows 8.1
  Windows 10
  Linux
  macOS

上述清單為一部分支援作業系統的範例。JDBC 驅動程式的目的是 
在支援使用 JAVA 虛擬機器 (JVM) 的任何作業系統上運作。

但只有最新的 Linux 與 MacOS 作業系統 (Ubuntu 19.10、Ubuntu 18.04、CentOS 7、SUSE 12、
macOS 10.15) 已經過相容性與支援測試。


-----------------------
支援的 JAVA 版本
-----------------------
Microsoft JDBC Driver 8.2 for SQL Server 已經過測試，且支援最新的 Java 版本 
Open JDK 和 Zulu 提供的最新 Java Development Kit(JDK) 組建版本。
支援下列 Java Runtime Environment (JRE) 系統程式庫系列版本：

  ----------------------------------------------------------------------
  JRE 系列版本 | 驅動程式 JAR 的最大支援版本
  ----------------------------------------------------------------------
  8+                 | mssql-jdbc-8.2.2.jre8.jar
  11+                | mssql-jdbc-8.2.2.jre11.jar
  13+                | mssql-jdbc-8.2.2.jre13.jar


----------------
版本內容
----------------
Microsoft JDBC Driver 8.2 for SQL Server zip 檔或 tar 檔，會解壓縮下列檔案 
於指定位置，相對於選取的安裝目錄：

<安裝目錄>\sqljdbc_<版本>\<語言>\install.txt
<安裝目錄>\sqljdbc_<版本>\<語言>\release.txt
<安裝目錄>\sqljdbc_<版本>\<語言>\license.txt
<安裝目錄>\sqljdbc_<版本>\<語言>\thirdpartynotices.txt
<安裝目錄>\sqljdbc_<版本>\<語言>\mssql-jdbc-8.2.2.jre8.jar
<安裝目錄>\sqljdbc_<版本>\<語言>\mssql-jdbc-8.2.2.jre11.jar
<安裝目錄>\sqljdbc_<版本>\<語言>\mssql-jdbc-8.2.2.jre13.jar
<安裝目錄>\sqljdbc_<版本>\<語言>\auth\x86\mssql-jdbc_auth-8.2.2.x86.dll
<安裝目錄>\sqljdbc_<版本>\<語言>\auth\x64\mssql-jdbc_auth-8.2.2.x64.dll
<安裝目錄>\sqljdbc_<版本>\<語言>\samples\<範例檔案...>
<安裝目錄>\sqljdbc_<版本>\<語言>\xa\xa_install.sql
<安裝目錄>\sqljdbc_<版本>\<語言>\xa\x86\sqljdbc_xa.dll
<安裝目錄>\sqljdbc_<版本>\<語言>\xa\x64\sqljdbc_xa.dll

如需各個元件的詳細資訊，請參閱線上文件，
Microsoft JDBC Driver for SQL Server 文件：
https://msdn.microsoft.com/en-us/library/dn197850(v=sql.10).aspx


-------------
文件
-------------
此套件中包含這份版本資訊、安裝指示與授權條款。
其他所有文件也都可於線上找到。

請注意，離線說明檔案已不再提供。


---------
JAR 檔案
---------
為支援回溯相容性及可能的升級情況，所以 JDBC Driver 8.2 包含 
每個安裝套件皆內含三個 JAR 類別庫：
	mssql-jdbc-8.2.2.jre8.jar
	mssql-jdbc-8.2.2.jre11.jar
	mssql-jdbc-8.2.2.jre13.jar


----------------------
功能特定檔案
----------------------
Azure Active Directory 和整合式驗證 (於 Windows) 元件包含 
在 'auth' 目錄中。

JDBC 分散式交易元件包含在 'xa' 目錄中。


--------------------
功能相依性
--------------------
Microsoft JDBC Driver 8.2 for SQL Server 中有幾項功能相依於外部程式庫， 
如下所列：

1.搭配 Azure Key Vault 提供者使用「Always Encrypted」
   相依的程式庫：azure-keyvault(1.2.2 版)、 adal4j(1.6.4 版)、
   與 client-runtime(1.7.0 版)

2.使用「具有安全記憶體保護區的 Always Encrypted」
   相依程式庫：com.google.code.gson(2.8.6 版)
   與 org.bouncycastle(1.64 版)。只有 JDK 8 才需要 org.bouncycastle。
 
3.在 Windows、Linux 與 macOS 作業系統上使用「Azure Active Directory 整合式驗證」
   相依的程式庫：adal4j(1.6.4 版) 與 client-runtime(1.7.0 版)
   
4.使用 'useFmtOnly' 擷取參數中繼資料
   相依的程式庫：antlr-runtime (4.7.2 版)
   
如需在標準 Java 應用程式或 Maven 應用程式中加入這些相依程式庫的詳細資訊， 
可前往：https://go.microsoft.com/fwlink/?linkid=867575

--------------------
主要版本變更
--------------------
在此穩定版本中引進了中斷性驅動程式 API 變更，以及
「具有安全記憶體保護區的 Always Encrypted」功能的實作。'SQLServerColumnEncryptionKeyStoreProvider'
類別中引進了新的公用抽象方法，這造成了主要版本變更。

此外，隨著 sqljdbc_auth.dll 重新命名為 mssql-jdbc_auth-8.2.2.<封存>.dll，先前使用
sqljdbc_auth.dll 的使用者必須使用 mssql-jdbc_auth-8.2.2.<封存>.dll 來更新其 sqljdbc_auth.dll。

-------
SAMPLES
-------
示範 JDBC 驅動程式各種功能的應用程式範例包含在 'samples'
"samples"目錄中。如需各個範例及其執行方法的詳細資料，請參閱線上 
文件。


-----------
變更清單
-----------
從 8.2.1.0 到 8.2.2.0 的變更:
- 新增選項以設定受信任 Azure Key Vault 端點的清單。

從 8.2.0.0 到 8.2.1.0 的變更:
錯誤修正：
- 修正了使用 'SQLServerResultSet.getObject()' 將資料擷取為 'java.time.LocalTime' 或 'java.time.LocalDate' 類型時，可能發生 'NullPointerException' 的問題。

從 7.4.1.0 到 8.2.0.0 的變更:
- 加入對具有安全記憶體保護區之 Always Encrypted 的支援
- 加入對 JAVA 13 的支援。
- 加入 'ISQLServerBulkData' 以從 'ISQLServerBulkRecord' 移除實作詳細資料。
- 加入在使用 Azure Key Vault 時對 Azure 國家雲端的支援。
- 針對呼叫 nvarchar 資料行上的 'SQLServerClob.length()' 加入回溯相容性。
- 針對 'SQLServerSpatialDatatype' 類別將內部模型更新為公開可見度。
- 更新 'ISQLServerBulkData' API 以擲回 'SQLException'，而非 'SQLServerException'。
- 將 'SQLServerConnection.state' 更新為揮發性。
- 針對 'SQLServerDataTable' 與 'SQLServerDataColumn' 引進 'hashCode()' and 'equals()' API。

改善︰
- 透過將 'Calendar' 取代為 'LocalDateTime'，以改進時態性資料類型 getter 方法的效能。
- 改善資料行名稱查閱的效能。
- 改進當使用包含萬用字元的程序名稱時 'CallableStatement' 與 'ParameterMetaData' 的效能

錯誤修正：
- 修正由於 'PreparedStatement' 查詢中尾端空格所引起的潛在效能問題。
- 修正原生 Always Encrypted 呼叫未同步的問題。
- 修正 'SQLServerDataColumn.equals()' 方法中潛在 'NullPointerException' 的問題。
- 修正當來源是 unicode char/varchar 且目的地是 nchar/nvarchar 時 BulkCopy 的問題。
- 修正 'SQLServerDatabaseMetaData.getColumns()' 只針對 Azure SQL Data Warehouse 傳回第一個資料行的問題。
- 修正 'SQLServerDatabaseMetaData.getImportedKeys()' 針對 Azure SQL Data Warehouse 失敗的問題。
- 修正 'Geography.STAsBinary()' 針對單一點傳回 Null 的問題。
- 修正 'DatabaseMetaData.getImportedKeys()' 傳回重複列的問題。
- 修正太早針對 XA 連線移除信任存放區密碼的問題。
- 修正 'SQLServerDatabaseMetada.getColumns()' 未逸出萬用字元的問題。
- 移除 'SQLServerDatabaseMetaData.getNumericFunctions()' 與 'SQLServerDatabaseMetaData.getStringFunctions()' 傳回值中的額外空格。

------------
已知問題
------------
下列為 Microsoft JDBC Driver 8.2 for SQL Server 的已知問題：

1) 使用 SQL Azure 時連線中斷

連線到 SQL Azure 時，網路元件 (例如防火牆) 可能會在一段時間沒有活動之後 
終止閒置連線。若要避免網路元件中斷閒置連線，
您應該在載入驅動程式的作業系統上 
進行下列登錄設定 (或非 Windows 的對等設定)：
           
登錄設定                                                                   建議值
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveTime            30000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveInterval         1000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpMaxDataRetransmission  10

2) 搭配 SQL_VARIANT 使用 TVP 時 

2.a) 針對日期值

在使用 TVP 填入資料表 (包含儲存於 in sql_variant 資料行的 datetime/smalldatetime/date 值) 時，
無法對 ResultSet 呼叫 getDateTime()/getSmallDateTime()/getDate()，而且會擲回下列例外狀況：

	java.lang.String 無法轉換成 java.sql.Timestamp

因應措施： 請改用 getString() 或 getObject()。

2.b) 針對 NULL 值搭配 SQL_VARIANT 使用 TVP

如果您使用 TVP 來填入資料表，並將 NULL 值傳送到 sql_variant 資料行類型，
會因為目前不支援於 TVP 中插入具有資料行類型 sql_variant 的 NULL 值而發生例外狀況。


3) 使用 NTLM 驗證時

目前不支援同時啟用擴充保護與加密連線。

4) 使用 useFmtOnly 時

有一些功能問題與是由 SQL 剖析邏輯中的缺陷所造成。
如需詳細資料與因應措施建議，請參閱 https://docs.microsoft.com/en-us/sql/connect/jdbc/using-usefmtonly。